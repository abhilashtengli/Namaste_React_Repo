Q.1 | What is `NPM`?
sol:  NPM, short for "Node Package Manager," is a tool for managing code packages in JavaScript and Node.js projects. It helps developers easily incorporate existing code,
      handles dependency management, and streamlines tasks like installation, updating, and sharing of packages. This promotes efficient development and collaboration by
      providing a central repository of reusable code modules.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2 | What is `Parcel/Webpack`?  Why do we need it?
sol:  Parcel and Webpack are tools that web developers use to bundle and manage files for websites, making them load quickly and efficiently. Parcel is a user-friendly and
      quick bundler, while Webpack is a more powerful and customizable option.
        
      We need tools like Parcel and Webpack to make our websites load faster by organizing and optimizing the code and files that make up the site. This improves user 
      experience and overall performance.
      - Faster website loading times
      - Improved user experience
      - Code modularity
      - Dependency management
      - Asset optimization
      - Code transformation for compatibility
      - Code splitting for optimized loading
      - Hot module replacement for faster development
      - Enhanced website performance
      - Efficient caching for reduced server load.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.3 | What is `.parcel-cache`
sol:  The .parcel-cache folder is a directory generated by the Parcel bundler when building projects. It stores cached data and temporary files to improve the speed of future builds
      by avoiding unnecessary downloads and recreations of certain assets and dependencies
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.4 | What is `npx` ? (Rephrase this)*****
sol:  npx is a command-line tool that comes bundled with Node.js and is used to run Node.js packages that are not globally installed on your system. It stands for "Node Package Execute" and is designed to make it easy to use command-line tools and utilities that are published as Node.js packages.

   Here's how npx works:

   Running Packages: Instead of installing a Node.js package globally using npm install -g, you can use npx to run a package without installing it globally.

   Execution: When you use npx, it checks if the package is installed locally in your project's node_modules directory. If it's not found, npx will download the package
   temporarily, execute the specified command from it, and then remove the package.

   Latest Version: npx ensures that you're using the latest version of the package each time you run it, so you don't have to worry about outdated global installations.

   Avoiding Global Pollution: Using npx reduces the need to install many global packages, which can clutter your system and lead to version conflicts.

   Running One-off Commands: npx is particularly useful for running commands from packages that you don't use frequently, avoiding the need to install them globally.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.5 | What is difference between `dependencies` vs `devDependencies`?
sol:  Dependencies: Packages your app needs to work properly in production.

      DevDependencies: Packages only needed during development, like testing and building tools. They're not included in the final production build.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.6 | What is Tree Shaking?
sol:  Tree shaking is a technique used in modern JavaScript bundlers, like Webpack, to eliminate unused code from your final bundled code. It's like trimming away unnecessary 
      branches from a tree, hence the name
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.7 | What is Hot Module Replacement? (HRM)
sol:  Hot Module Replacement (HMR) is a development feature in React (and other JavaScript frameworks) that allows you to see instant changes in your app's UI without needing 
      to manually refresh the page. It makes the development process faster and more seamless. It maintains the application's current state, so you don't lose the data or context
      you had while making changes.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.8 | List down your favourite 5 superpowers of Parcel and describe them.
sol:  1) Zero Configuration: Parcel offers out-of-the-box setup with minimal configuration. It automatically detects and configures dependencies, making it easy to get started 
        with a new project.

      2) Fast Builds: Parcel is known for its speed. It uses parallel processing and caching to optimize build times, delivering quicker development feedback.

      3) Hot Module Replacement(HMR): Parcel provides seamless Hot Module Replacement, enabling instant updates to your app during development without needing manual refreshes.
  
      4) Minification: In web development where the size of a file, typically JavaScript or CSS, is reduced by removing unnecessary characters like spaces, line breaks, and
         comments, without affecting its functionality

      5) Caching while development: Temporary storage of certain files, data, or assets so that they can be quickly retrieved without being reloaded from their original source.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.9 | What is `.gitignore`? What should we add and not add into it?
sol:  The .gitignore file is a text file that tells Git which files or folders to ignore in a project during commit to the repository. The types of files you should consider 
      adding to a .gitignore file are any files that do not need to get committed. 
      - for example, For security, the security key files, API keys and node_modules should get added to the gitignore.
      - package-lock.json should not add into your .gitignore file 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.10 | What is the difference between `package.json` and `package-lock.json`
sol:   package.json:
       - This file is mandatory for every project
       - It contains basic information about the project
       - Application name/version/scripts
 
       package-lock.json:  
       - This file is automatically generated for those operations where npm modifies either the node_module tree or package-json.
       - It is generated after an npm install
       - It allows future devs & automated systems to download the same dependencies as the project.
       - It also allows to go back to the past version of the dependencies without actual â€˜committing the node_modules folder.
       - It records the same version of the installed packages which allows to reinstall them. Future installs will be capable of building identical description tree.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.11 | Why should I not modify `package-lock.json`?
sol:  package-lock.json file contains the information about the dependencies and their versions used in the project. Deleting it would cause dependencies issues in the 
      production environment. So don't modify it, It's being handled automatically by NPM.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.12 | What is `node_modules` ? Is it a good idea to push that on git?
sol:   - node_modules folder like a cache for the external modules that your project depends upon. When you npm install them, they are downloaded from the web and copied into 
       the node_modules folder and Nodejs is trained to look for them there when you import them (without a specific path).
       - Don't push node_modulesin github because it contains lots of files(more than 100 MB), it will cost you memory space.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.13 | What is the `dist` folder?
sol:   The dist folder, short for "distribution," is a directory commonly found in software development projects, including web development. It contains the final version of your
       project that is ready for deployment or distribution to users.

       Key points:
       - Final Build->  The dist folder holds the fully optimized and compiled version of your project. This version is usually stripped of unnecessary code, comments, and 
         development-specific files.
       - Minified and Bundled-> Inside the dist folder, you'll often find minified and bundled files. JavaScript and CSS files are compressed to reduce their size, 
         improving loading times.
       - HTML Files->  If your project consists of web pages, the dist folder may include HTML files that reference the minified and bundled assets.
       - Ready for Production->  The files in the dist folder are what you'd upload to a web server to make your website or application live for users.
       - Automatic Generation->  Build tools like Webpack or Parcel generate the contents of the dist folder by processing and optimizing your source code.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.14 | What is `browserlists`
sol:   Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. 
       It's used by frameworks/libraries such as React, Angular and Vue, but it's not limited to them.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                              Steps to follow to build React App.

  Step 1: npm init or npm init -y
  Step 2: npm install -D parcel (D means for development only)
  Step 3: npm install react
  Step 4: npm install react-dom
  Step 5: npx parcel index.html (It means we gave index.html as a origin(Start) of the project)
  Step 6: import React from "react" and
          import ReactDOM from "react-dom/client" (in .js file)
  Step 7: remove ->   "main": "script.js" from the package.json otherwise it will throw error
  Step 8: npx parcel build index.html
  

























